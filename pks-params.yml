# Pipeline resource configuration
## CUSTOMER_NAME:
# If needed, please go to network.pivotal.io and create an account, try to download pks and accept the EULA
pivnet_token: CHANGE_ME              # Pivnet token for downloading resources from Pivnet. Find this token at https://network.pivotal.io/users/dashboard/edit-profile
opsman_major_minor_version: ^2\.3.*$ # Ops Manager minor version to use
pks_major_minor_version: ^1\.2.*$    # Major/Minor PKS version ... change if needed

### vCenter configuration
vcenter_host: CHANGE_ME         # vCenter host or IP
vcenter_usr: CHANGE)ME          # vCenter username. If user is tied to a domain, then escape the \, example `domain\\user`
vcenter_pwd: "VMware1!"         # vCenter password
vcenter_data_center: CHANGE_ME  # vCenter datacenter where PKS will be installed
vcenter_insecure: 1             # vCenter skip TLS cert validation; enter `1` to disable cert verification, `0` to enable verification
vcenter_ca_cert:                # vCenter CA cert at the API endpoint; enter a value if `vcenter_insecure: 0`

### Ops Manager VM configuration
om_vm_host:                             # Optional - vCenter host to deploy Ops Manager in
om_data_store: CHANGE_ME                # vCenter datastore name to deploy Ops Manager in
opsman_domain_or_ip_address: CHANGE_ME  # FQDN to access Ops Manager without protocol (will use https), ex: opsmgr.example.com
opsman_admin_username: admin            # Username for Ops Manager admin account
opsman_admin_password: VMware1!         # Password for Ops Manager admin account
om_ssh_pwd: VMware1!                    # SSH password for Ops Manager (ssh user is ubuntu)
om_decryption_pwd: VMware1!             # Decryption password for Ops Manager exported settings
om_ntp_servers: CHANGE_ME               # Comma-separated list of NTP Servers
om_dns_servers: CHANGE_ME               # Comma-separated list of DNS Servers
om_gateway: CHANGE_ME                   # Gateway PKS_MGMT network
om_netmask: CHANGE_ME                   # Netmask for PKS_MGMT network
om_ip: CHANGE_ME                        # IP to assign to Ops Manager VM from PKS_MGMT logical network
om_vm_network: LS_PKS_MGMT                 # vCenter network name to use to deploy Ops Manager in
om_vm_name: opsmgr-pks                  # Name to use for Ops Manager VM
opsman_disk_type: "thin"                # Disk type for Ops Manager VM (thick|thin)
om_vm_power_state: true                 # Whether to power on Ops Manager VM after creation
om_vm_folder:                           # Leave it blank


### BOSH TILE ###
# vCenter Cluster or Resource Pool to use to deploy Ops Manager.
# Create resource pools PKS_MGMT in vcenter prior to running pipeline
om_resource_pool: PKS_MGMT  # Resource pool for PKS_MGMT vms 

# Storage for PKS_MGMT VMs and bosh
ephemeral_storage_names: CHANGE_ME  # Ephemeral Storage names in vCenter for use by PKS
persistent_storage_names: CHANGE_ME # Persistent Storage names in vCenter for use by PKS

bosh_vm_folder: "pks_vms"                 # vSphere datacenter folder (such as pcf_vms) where VMs will be placed
bosh_template_folder: "pks_templates"     # vSphere datacenter folder (such as pcf_templates) where templates will be placed
bosh_disk_path: "pks_disk"                # vSphere datastore folder (such as pcf_disk) where attached disk images will be created

trusted_certificates:         # Trusted certificates to be deployed along with all VM's provisioned by BOSH
vm_disk_type: "thick"         # Disk type for BOSH provisioned VM. (thick|thin)

# AZ Config
az_1_name: PKS_MGMT               # Logical name of availability zone. No spaces or special characters.
az_1_cluster_name: CHANGE_ME      # Name of cluster in vCenter for PKS
az_1_rp_name: PKS_MGMT            # Resource pool name in vCenter for PKS

az_2_name: PKS_K8S               # Logical name of availability zone. No spaces or special characters.
az_2_cluster_name: CHANGE_ME      # Name of cluster in vCenter for PKS
az_2_rp_name: PKS_K8S            # Resource pool name in vCenter for PKS

# Leave blank unless creating more than two resource pools.
az_3_name:                    # Logical name of availability zone. No spaces or special characters.
az_3_cluster_name:            # Name of cluster in vCenter for PKS
az_3_rp_name:                 # Resource pool name in vCenter for PKS

ntp_servers: CHANGE_ME               # Comma-separated list of NTP servers to use for VMs deployed by BOSH
enable_vm_resurrector: true   # Whether to enable BOSH VM resurrector
max_threads: 30               # Max threads count for deploying VMs

# Network configuration
icmp_checks_enabled: false     # Enable or disable ICMP checks
infra_network_name: "PKS_MGMT"
infra_vsphere_network: "LS_PKS_MGMT"           # PKS_MGMT logical switch name as seen in vsphere
infra_nw_cidr: CHANGE_ME                    # PKS_MGMT logical network CIDR, ex: 10.0.0.0/22
infra_excluded_range: CHANGE_ME             # Infrastructure network exclusion range i.e - 10.87.0.1-10.87.0.2
infra_nw_dns: CHANGE_ME                     # Infrastructure network DNS, any DNS
infra_nw_gateway: CHANGE_ME                 # Infrastructure network Gateway
infra_nw_azs: PKS_MGMT                      # Comma separated list of AZ's to be associated with this network

nsx_networking_enabled: true    # (true|false) to use nsx networking feature. PKS v1.1+ requires it to be true
nsx_mode: nsx-t                 # Valid values: nsx-t, nsx-v
nsx_address: CHANGE_ME          # Nsx Mgr FQDN, not IP
nsx_username: admin             # username for nsx access
nsx_password: "VMware1!"        # password for nsx access

# Additional network
pks_network_name: "PKS_K8S"    # Logical switch for PKS_K8S
pks_vsphere_network: "LS_PKS_K8S" # vCenter PKS_K8S  network name for PKS - if empty quotes, then this network would be skipped
pks_nw_cidr: CHANGE_ME          # PKS_K8S network, usually VIP network for POC, CIDR, ex: 10.0.0.0/22
pks_excluded_range: CHANGE_ME   # PKS_K8S network exclusion range
pks_nw_dns: CHANGE_ME           # PKS_K8S network DNS
pks_nw_gateway: CHANGE_ME       # PKS_K8S network Gateway
pks_nw_azs: PKS_K8S            # Comma separated list of AZ's to be associated with this network
is_service_network: true        # Required select service network option in Ops man true or false

### PKS Tile ###
# Create DNS entry in the loadbalancer and DNAT/SNAT entries for following
pks_tile_system_domain: CHANGE_ME   # Domain name only i.e - vmware.com
# Just provide the prefix like uaa or api for domain_prefix.
# The prefix together with system domain would be used like api.pks.test.corp.com or uaa.pks.test.corp.com
pks_tile_uaa_domain_prefix: pks-api # Would be used for UAA as ${prefix}.${pks_system_domain}

# IMPORTANT DNS RESOLUTION FOR PKS CONTROLLER
# External IP that would be routable via the NSX T0 Router and mapped to ${pks_tile_uaa_domain_prefix}.${pks_system_domain}
# Only required if PKS-MGMT is non routable
pks_tile_uaa_system_domain_ip: CHANGE_ME #Address from the PKS_MGMT network, usually in sequential access of bosh
pks_tile_cli_username: pksadmin
pks_tile_cli_password: "VMware1!"
pks_tile_cli_useremail: CHANGE_ME # pksadmin@yourdomain.com
pks_tile_cert_pem: # Would be generated or provide
#cert_pem: |
  # -----BEGIN CERTIFICATE-----
  # MIIDjDCCAnSasfasdfsfd324242342UAMIG3232GMS4wLAYDVQQD
  # asfsafsafasf
  # .............
  # -----END CERTIFICATE-----

pks_tile_private_key_pem: # Would be generated

# All the following fields need to be filled in
pks_tile_vcenter_host: CHANGE_ME            # vcenter fqdn
pks_tile_vcenter_usr: CHANGE_ME             # 
pks_tile_vcenter_pwd: VMware1!              # 
pks_tile_vcenter_data_center: CHANGE_ME     # Datacenter where PKS control plane vm will be installed
pks_tile_vcenter_cluster: CHANGE_ME         # Cluster where PKS control plane vm will be installed
pks_tile_vcenter_datastore: CHANGE_ME       # Datastore where PKS control plane vm will be installed
pks_tile_vm_folder: pks_vms                 # Folder where PKS control plane vm will be installed

pks_tile_singleton_job_az: PKS_MGMT           # Check
pks_tile_nw_azs: PKS_MGMT
pks_tile_deployment_network_name: PKS_MGMT      # Can be any network created already, default: INFRASTRUCTURE
pks_tile_cluster_service_network_name: PKS_K8S # Should match the PKS_K8S network created already

# ALERT - The underlying Edge instances should be large, 8 vcpus.
# Otherwise the pks-nsx-t-precheck errrand would fail.
pks_tile_nsx_skip_ssl_verification: true # can be true or false

# WARNING!! dont disable PKS NSX-T Precheck Errand
# Tags get set as part of the errand for the Routers, IP Blocks, IP Pools etc.
pks_tile_disable_nsx_t_precheck_errand: false                          # Default: false. Set to true if using medium edge sizes as PKS Errand would fail with smaller edges

# PKS Main configs
pks_tile_t0_router_name: T0RouterPKS1               # Name of T0 Router to be used for PKS
pks_tile_nsx_nat_mode: true                         # Set to true
pks_tile_external_ip_pool_name: pks-vip-pool        # Name of VIP pool in nsx
pks_tile_container_ip_block_name: pks-pod-ip-block  # Name of Pod/Container IP Block in NSX Mgr to be used for PKS
pks_tile_nodes_ip_block_name: pks-node-ip-block     # Name of Node IP Block in NSX Mgr to be used for PKS nodes in v1.1
pks_tile_vcenter_cluster_list: CHANGE_ME            # List of vcenter clusters for PKS to deploy k8s clusters
pks_tile_nodes_dns_list: CHANGE_ME                  # DNS server ip list for use by k8s nodes

# Syslog Flags
pks_tile_syslog_migration_enabled: disabled # can be set to 'enabled', if 'disabled' all syslog properties ignored
pks_tile_syslog_address: #101.10.10.10
pks_tile_syslog_port: # 0
pks_tile_syslog_transport_protocol: #tcp
pks_tile_syslog_tls_enabled: # true
pks_tile_syslog_peer: # *.test.corp.com
pks_tile_syslog_ca_cert:

# Allow public ip
pks_tile_allow_public_ip: true # leave it to empty or false to turn off public ip

# vRealize Log Insight (vrli) flags
pks_tile_vrli_enabled: false # Change to true and fill following fields for using vrli
pks_tile_vrli_host:
pks_tile_vrli_use_ssl: true
pks_tile_vrli_skip_cert_verify: true
pks_tile_vrli_ca_cert: # cert contents
pks_tile_vrli_rate_limit: 0

# PKS use Proxy
pks_tile_enable_http_proxy: false # Change to true and fill following fields for using proxy
pks_tile_http_proxy_url:
pks_tile_http_proxy_user:
pks_tile_http_proxy_password:
pks_tile_https_proxy_url:
pks_tile_https_proxy_user:
pks_tile_https_proxy_password:
pks_tile_no_proxy:

# Use LDAP for PKS UAA
# Default is to use internal uaa
pks_tile_uaa_use_ldap: false # Change to true and fill following fields for using LDAP
pks_tile_ldap_url:
pks_tile_ldap_user:
pks_tile_ldap_password:
pks_tile_ldap_search_base:
pks_tile_ldap_group_search_base:
pks_tile_ldap_server_ssl_cert:
pks_tile_ldap_server_ssl_cert_alias:
pks_tile_ldap_email_domains:
pks_tile_ldap_first_name_attribute:
pks_tile_ldap_last_name_attribute:

# PKS Wavefront integration
pks_tile_wavefront_api_url: # wavefront api url, empty is disabled
pks_tile_wavefront_token:   # wavefront access token
pks_tile_wavefront_alert_targets:  # email ids to sent alerts

pks_tile_telemetry: disabled # can be enabled or disabled

pks_tile_plan_details:
- plan_detail:
    name: "small"  # the name that appears for end users to choose
    plan_selector: plan1_selector # Dont change the value of selector - Needs to be planN_selector
    is_active: true
    description: "Small plan"
    # AZ can be only a single value for PKS v1.0
    # There can be a comma separated list for PKS v1.1 which supports multiple AZs
    az_placement: PKS_K8S  # Specify the AZ in which the cluster will be created, single for PKS v1.0
    master_vm_type: medium
    worker_vm_type: medium
    persistent_disk_type: "10240" # Used in PKS 1.0
    master_persistent_disk_type: "10240" # Used in PKS 1.1+
    worker_persistent_disk_type: "10240" # Used in PKS 1.1+
    master_instances: 1    # The number of K8s worker instances
    worker_instances: 3    # The number of K8s worker instances
    errand_vm_type: micro
    addons_spec: "" # Kubernetes yml that contains specifications of addons to run on every cluster. This is an experimental feature. Please consider carefully before applying this to your plan
    # Privileged containers run with host-like permissions.
    # Allowing your users to deploy privileged containers in clusters using this plan can create security vulnerabilities and may impact other tiles.
    # Use with caution.
    allow_privileged_containers: false # default false
    # The admission controller will deny exec and attach commands to pods that run with escalated privileges that allow host access.
    # If checked, the admission controller will be disabled.
    # Clusters in this plan can then create security vulnerabilities and may impact other tiles.
        # Use with caution.
- plan_detail:
    name: "medium"  # the name that appears for end users to choose
    is_active: false
    plan_selector: plan2_selector # Dont change the value of selector - Needs to be planN_selector
    description: "Medium plan"
    # AZ can be only a single value for PKS v1.0
    # There can be a comma separated list for PKS v1.1 which supports multiple AZs
    az_placement: PKS_K8S  # Specify the AZ in which the cluster will be created, single for PKS v1.0
    master_vm_type: medium
    worker_vm_type: medium
    persistent_disk_type: "10240" # Used in PKS 1.0
    master_persistent_disk_type: "10240" # Used in PKS 1.1+
    worker_persistent_disk_type: "10240" # Used in PKS 1.1+
    master_instances: 3    # The number of K8s worker instances
    worker_instances: 5    # The number of K8s worker instances
    errand_vm_type: micro
    addons_spec: "" # Kubernetes yml that contains specifications of addons to run on every cluster. This is an experimental feature. Please consider carefully before applying this to your plan
    allow_privileged_containers: false  # Privileged containers run with host-like permissions. Allowing your users to deploy privileged containers in clusters using this plan can create security vulnerabilities and may impact other tiles. Use with caution."
    # The admission controller will deny exec and attach commands to pods that run with escalated privileges that allow host access.
    # If checked, the admission controller will be disabled.
    # Clusters in this plan can then create security vulnerabilities and may impact other tiles.
    # Use with caution.
- plan_detail:
    name: "large"  # the name that appears for end users to choose
    is_active: false
    plan_selector: plan3_selector # Dont change the value of selector - Needs to be planN_selector
    # other fields not considered if its not active

# Use this for downloading PKS from a s3 bucket
# s3_bucket: pks-tile-s3              # Required for S3. ID of the AWS S3 bucket to download Pivotal releases from
# s3_creds_access_key_id: AAa23....asdfZA       # Required for S3. Access key of the AWS S3 bucket
# s3_creds_secret_access_key: s6A234...asfsadUL   # Required for S3. Secret access key of the AWS S3 bucket
# s3_region: us-west-2                 # The region the bucket is in. Leave it blank if not applicable (e.g. for Minio)
# s3_pks_tile_path: pivotal-container-service-(.*).pivotal    # file path name to the tile in the s3 bucket

# Use this for downloading PKS tile from a web server (till it becomes available on Pivnet)
# pks_tile_webserver: http://101.101.101.101:8080      # EDIT ME
# pksv11_tile: pivotal-container-service-1.1.0.pivotal # EDIT ME

### HARBOR ###
# tile-specific parameters
product_name: harbor-container-registry  # do not change
product_slug: harbor-container-registry  # do not change
harbor_product_version: ^1\.7\..*$  # PKS tile version to install
product_globs: "*.pivotal"

# Note: check companion "pks_vault_params.sh" script for automated credentials
#       creation for this pipeline in either Vault or CredHub.

# AZs and Networks configuration
harbor_networks: |
  network:
    name: PKS-MGMT
  other_availability_zones:
  - name: PKS-MGMT
  - name: PKS-MGMT
  singleton_availability_zone:
    name: PKS-MGMT
harbor_tile_app_domain: CHANGE_ME # EDIT ME - Make sure this matches the property specified in the block below
harbor_tile_app_domain_ip: CHANGE_ME # Leave blank if PKS-MGMT is routed?

harbor_properties: |
  ######## General
  ### The FQDN (not IP) of Harbor instance. Its domain must match the wildcard domain used for generating Harbor certificate.
  .properties.hostname:
    value: CHANGE_ME
  ######## SSL certificate and private key for Harbor
  ### SSL Certificate and key PEMs
  .properties.server_cert_key:
  #
  # The "generate_cert_domains" parameter controls the automatic certificates
  #   generation behavior for this property.
  #
  # If auto-generation of certs is desired, leave this parameter un-commented
  #   and update the array of domain names to be used for cert generation.
  #   e.g. ["harbor.mydomain.com"].
  #   Leave parameters cert_pem and private_key_pem with empty values in this case.
  #
  # Otherwise, either comment out or delete this parameter line and
  #   provide the certificate (cert_pem) and private key (private_key_pem) values
  #   in the corresponding parameters further below.
  #
    generate_cert_domains: ["CHANGE_ME"]
    value:
      cert_pem:
      private_key_pem:
  ### Certificate Authority (CA) for the server certificate. If using self-signed certificate, please paste the corresponding CA here. Leave empty if using root CA of Ops Manager.
  .properties.server_cert_ca:
    value:
  ######## Credentials
  ### The password for the system administrator
  .properties.admin_password:
    value:
      secret: VMware1!
  ######## Authentication Mode
  ### Options:
  ### - db_auth        (Internal, i.e. Harbor internal user management)
  ### - ldap_auth      (LDAP)
  ### - uaa_auth_pks   (UAA in Pivotal Container Service)
  ### - uaa_auth_pas   (UAA in Pivotal Application Service)
  .properties.auth_mode:
    value: db_auth
  ### if "ldap_auth" is chosen for authentiaction mode, then uncomment and fill out the ldap parameters below
  ### otherwise, leave this section commented out to avoid Ops Manager parameter settings errors
  ###
  ### The LDAP Endpoint URL.
  # .properties.auth_mode.ldap_auth.url:
  #   value: ( ( ldap_auth_url ) )
  ### Verify LDAP server SSL certificate (flag) - true or false
  # .properties.auth_mode.ldap_auth.verify_cert:
  #   value: ( ( ldap_auth_verify_cert ) )
  ### The DN of the user who has the permission to search the LDAP server.
  # .properties.auth_mode.ldap_auth.searchdn:
  #   value: ( ( ldap_auth_searchdn ) )
  ### The password of the user who has the permission to search the LDAP server.
  # .properties.auth_mode.ldap_auth.searchpwd:
  #   value:
  #     secret: ( ( ldap_auth_searchpwd ) )
  ### The base DN from which to look up a user in LDAP server
  # .properties.auth_mode.ldap_auth.basedn:
  #   value: ( ( ldap_auth_basedn ) )
  ### The attribute used in a search to match a user, it could be uid, cn, email, sAMAccountName or other attributes depending on your LDAP server
  # .properties.auth_mode.ldap_auth.uid:
  #   value: ( ( ldap_auth_uid ) )
  ### Search filter for LDAP server. Make sure the syntax of the filter is correct
  # .properties.auth_mode.ldap_auth.filter:
  #   value: ( ( ldap_auth_filter ) )
  ### The LDAP scope to search for users
  ### Options:
  ### - 0        (Base)
  ### - 1        (nsx_networking_enabledevel)
  ### - 2        (Subtree)
  # .properties.auth_mode.ldap_auth.scope:
  #   value: ( ( ldap_auth_scope ) )
  ### The timeout (in seconds) when connecting to the LDAP Server
  # .properties.auth_mode.ldap_auth.timeout:
  #   value: ( ( ldap_auth_timeout ) )
  ######## Container Registry Storage
  ### Container Registry's filesystem
  ### Options:
  ### - filesystem     (Local File System)
  ### - s3             (AWS S3)
  .properties.registry_storage:
    value: filesystem
  ### if "s3" is chosen for Container Registry Storage, then uncomment and fill out the s3 parameters below
  ### otherwise, leave this section commented out to avoid Ops Manager parameter settings errors
  ###
  ### S3 Access Key
  # .properties.registry_storage.s3.access_key:
  #   value: ( ( s3_registry_storage_access_key ) )
  ### S3 Secret Key
  # .properties.registry_storage.s3.secret_key:
  #   value:
  #     secret: ( ( s3_registry_storage_secret_key ) )
  ### S3 Region
  # .properties.registry_storage.s3.region:
  #   value: ( ( s3_registry_storage_region ) )
  ### S3 Endpoint URL of your S3-compatible file store
  # .properties.registry_storage.s3.endpoint_url:
  #   value: ( ( s3_registry_storage_endpoint_url ) )
  ### S3 Bucket Name
  # .properties.registry_storage.s3.bucket:
  #   value: ( ( s3_registry_storage_bucket ) )
  ### S3 Root Directory in the Bucket
  # .properties.registry_storage.s3.root_directory:
  #   value: ( ( s3_registry_storage_root_directory ) )
  ######## Clair Settings
  ### Determine if include Clair in the deployment to support vulnerability scanning (flag: true or false)
  .properties.with_clair:
    value: true
  ######## with_notary Settings
  ### Determine if include Notary in the deployment to support content trust (flag: true or false)
  .properties.with_notary:
    value: true
# Errands to disable
harbor_errands_to_disable: ""
  # smoke-testing, uaa-deregistration

# Resources
harbor_resources: |
  harbor-app:
    instance_type:
      id: large.disk
    persistent_disk:
      size_mb: "102400"
  smoke-testing:
    instance_type:
      id: medium